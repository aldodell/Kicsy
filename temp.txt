
class KApplicationClass extends KicsyObject {
    name;
    description;
    environments;
    version;
    author;
    rootView
    help;
    iconDrawer;

    constructor(
        name = "Application with no name. Change it now!",
        description = "No description",
        environments = ["system"],
        version = 1, author = "Kicsy",
        rootView = undefined,
        iconDrawer = KDefaultImages("TERMINAL"),
        help = "No help exists for this application") {

        super();
        this.name = name;
        this.description = description;
        this.environments = environments;
        this.version = version;
        this.author = author;
        this.rootView = rootView;
        this.iconDrawer = iconDrawer;
        this.help = help;
    }

    register() {
        Kicsy.applications.push(this);
        return this;
    }

    run() {
        if (this.rootView != undefined) {
            if (this.rootView.parentNode == null) { this.rootView.publish(Kicsy.mainSurface); }
            this.rootView.show();
        }
        return this;
    }

    processMessage(message) {
        switch (message.action) {
            case "run":
                return this.run();
        }
    }

    processMessage(message) {
        return this.processMessage(message);
    }

}

(function KVersionApp() {
    let app = new KApplicationClass("version", "Version App", ["system"], "1.0", "Kicsy");
    app.rootView = KWindow("Kicsy version: " + Kicsy.version).setSize(200, 100);
    app.register();
    return app;
})();










/************************************************************************************ */
/*                           Applications FUNCTIONS                                        */
/************************************************************************************ */
class KApplicationClass extends KicsyObject {

    /** Application name */
    name = "Application";
    /** Application description */
    description = "Aplication description";
    /** Application environments */
    environments = [];
    /** Application version */
    version = "1.0.0";
    /** Application author */
    author = "Kicsy";
    /** Application root view */
    rootView = null;

    iconDrawer;

    constructor(name, description, environments, version = 1, author) {
        super();
        this.name = name;
        this.description = description;
        this.version = version;
        this.author = author;
        this.environments = environments;
        this.iconDrawer = KDefaultImages("TERMINAL");

    }

    /**
     * Sets the icon drawer for the application.
     *
     * @param {any} iconDrawer - The icon drawer to set.
     * @return {KApplicationClass} - The current instance of the KApplicationClass.
     */
    setIconDrawer(iconDrawer) {
        // Set the icon drawer for the application.
        this.iconDrawer = iconDrawer;
        // Return the current instance of the KApplicationClass.
        return this;
    }

    /**
     * Preprocesses a message for the application.
     *
     * @param {Object} message - The message to be preprocessed.
     */
    preprocessMessage(message) {
        // Check the action in the message and perform the corresponding action.
        switch (message.action) {
            case "hide":
                // If the root view is defined, hide it.
                if (this.rootView != undefined) this.rootView.hide();
                break;
            case "show":
                // If the root view is defined, show it.
                if (this.rootView != undefined) this.rootView.show();
                break;
            case "run":
                // If the root view is defined, run it.
                if (this.rootView != undefined) this.run();
                break;
        }
    }

    /**
     * Processes a message for the application.
     *
     * This method calls the preprocessMessage method with the given message
     * and does not return any value.
     *
     * @param {Object} message - The message to be processed.
     */
    processMessage(message) {
        // Call the preprocessMessage method with the given message.
        // This method will handle the action in the message and perform the corresponding action.
        this.preprocessMessage(message);
    }

    register() {
        Kicsy.applications.push(this);
        KMessage(this.name, "desktop", "Kicsy", "system", "update", "").send();
        return this;
    }

    /**
     * Runs the application.
     *
     * If the root view is defined and it is not already published, it is published to the main surface.
     * Then, the root view is shown.
     */
    run() {
        // Check if the root view is defined.
        if (this.rootView != undefined) {
            // Check if the root view is not already published.
            if (this.rootView.parentNode == null) {
                // Publish the root view to the main surface.
                this.rootView.publish(Kicsy.mainSurface);
            }
            // Show the root view.
            this.rootView.show();
        }
    }
}




/**
 * Function: KDesktopApp
 * 
 * Description: This function creates and returns a new instance of the KApplicationClass
 *              with the name "KDesktopApp", description "Desktop App", environments "base",
 *              version "1.0", and author "Kicsy". 
 * 
 * Returns: KApplicationClass instance
 */
(function KDesktopApp() {
    // Create a new instance of the KApplicationClass with the specified properties
    let app = new KApplicationClass("desktop", "Desktop App", ["base"], "1.0", "Kicsy");

    // Create a new KLayer instance with a CSS style of "position: absolute; width: 100%;
    // height: 130px; left:0px; bottom:0px; margin: 0px; padding: 0px; border: 1px solid black;
    // overflow-x: scroll;" and assign it to the menuLayer variable
    app.menuLayer = new KLayer()
        .addCssText("position: absolute; width: 100%; height: 130px; left:0px; bottom:0px; margin: 0px; padding: 0px; border: 1px solid black; overflow-x: scroll;");

    // Create a new KLayer instance with a CSS style of "position: absolute; width: 100%;
    // height: 100%; left:0px; top:0px; margin: 0px; padding: 0px; background-color: PaleGreen;"
    // and add it as a child of the menuLayer. Assign the newly created KLayer to the rootView variable
    app.rootView = new KLayer(app.menuLayer)
        .addCssText("position: absolute; width: 100%; height: 100%; left:0px; top:0px; margin: 0px; padding: 0px; background-color: PaleGreen;");

    // Publish the rootView of the application to the document.body of the page
    app.rootView.publish(Kicsy.mainSurface);

    // Set the Kicsy.mainSurface to the rootView of the application
    Kicsy.mainSurface = app.rootView.dom;

    /**
     * Function: processMessage
     * 
     * Description: This function handles the processing of a message for the KDesktopApp application.
     *              If the action of the message is "update", it calls the update function of the application.
     * 
     * @param {Object} message - The message to be processed.
     */
    app.processMessage = function (message) {

        switch (message.action) {
            case "update":
                app.update();
                break;

            default:
                break;

        }

    }

    /**
     * Function: update
     * 
     * Description: This function updates the menu layer of the KDesktopApp application.
     *              It clears the menu layer and adds icons for each application that
     *              has an environment that is included in the current user's environments.
     */
    app.update = function () {
        // Clear the menu layer
        app.menuLayer.clear();

        // Loop through each application
        Kicsy.applications.forEach(application => {
            // Loop through each environment in the current user's environments
            Kicsy.currentUser.environments.forEach(environment => {
                // Check if the application has the environment
                if (application.environments.includes(environment)) {
                    // Create a new KAppIcon for the application and add it to the menu layer
                    let appIcon = KAppIcon(application.name, application.iconDrawer, application.run);
                    app.menuLayer.add(appIcon);
                }
            })
        })
    }

    // Return the newly created application instance
    return app;
})();

(function KAlertApp() {
    let app = new KApplicationClass("alert", "Alert App", ["base"], "1.0", "Kicsy");
    app.processMessage = function (message) {
        app.super.processMessage(message);
        if (message.action == "run") {
            alert(message.payload);
        }
    }
    return app;
})();

(function KVersionApp() {
    let app = new KApplicationClass("version", "Version App", ["system"], "1.0", "Kicsy");
    app.rootView = KWindow("Kicsy version: " + Kicsy.version).setSize(200, 100);
    app.register();
    return app;
})();







/**
TEMPRAL
*/






/**
     * Sets the data for all child components of the container.
     * If a child component has a setData method, it is called with the corresponding value.
     * If a child component has a setValue method, it is called with the corresponding value.
     * Each child must have a name attribute set. Use {@link KicsyComponent#setName} to add child components.
     *
     * @param {Object} data - The data object containing the values to set.
     * @return {KicsyVisualContainerComponent} - The current instance of the container.
     */
    setData(data) {

        // Get the name attribute of the child component's DOM element
        let name = this.dom.getAttribute("name");

        if (name == undefined) {
            for (let child of this.dom.childNodes) {
                if (child.kicsy.setData != undefined) {
                    child.kicsy.setData(data);
                } else {
                    let childName = child.getAttribute("name");
                    if (data[childName] != undefined) {
                        child.kicsy.setValue(data[childName]);
                    }
                }
            }
        } else {


            // Iterate over each child component of the container's DOM element
            for (let child of this.dom.childNodes) {

                // Get the name attribute of the child component's DOM element
                let childName = child.getAttribute("name");


                // If the data object contains a value for the current child component's name
                if (data[name] != undefined) {
                    // If the child component has a setData method, call it with the corresponding value
                    if (child.kicsy.setData != undefined) {
                        child.kicsy.setData(data[name]);
                    }
                    // Otherwise, call the setValue method with the corresponding value
                    else {
                        if (childName != undefined && name != undefined) {
                            child.kicsy.setValue(data[name][childName]);
                        }
                    }
                } else {
                    // If the child component has a setData method, call it with the corresponding value
                    if (child.kicsy.setData != undefined) {
                        child.kicsy.setData(data);
                    }
                }
            }
        }
        // Return the current instance of the container
        return this;
    }


    /**
     * Retrieves data from all child components of the container.
     * If a child component has a getData method, it is called recursively with the corresponding value.
     * If a child component has a getValue method, its value is stored in the data object.
     * Each child must have a name attribute set. Use {@link KicsyComponent#setName} to add child components.
     *
     * @param {Object} [data] - The data object to store the values in. If not provided, a new object is created.
     * @param {function} [callback] - The callback function to call with the data object. If not provided, the data object is returned.
     * @returns {KicsyVisualContainerComponent|Object} - If no callback function is provided, the data object is returned.
     * Otherwise, the current instance of the container is returned.
     */
    getData(data, callback) {

        // If no data object is provided, create a new one
        if (data == undefined) {
            data = {};
        }

        // Get the name attribute of the container's DOM element
        let name = this.dom.getAttribute("name");

        // Iterate over each child component of the container's DOM element
        for (let child of this.dom.childNodes) {

            // Get the name attribute of the child component's DOM element
            let childName = child.getAttribute("name");

            // If the child component has a getData method, call it recursively
            if (child.kicsy.getData != undefined) {
                if (name == undefined) {
                    child.kicsy.getData(data, callback);
                } else {
                    child.kicsy.getData(data[name], callback);
                }
            } else {
                // If the child component has a getValue method, store its value in the data object
                if (name != undefined && childName != undefined) {
                    let childValue = {};
                    childValue[childName] = child.kicsy.getValue();
                    if (data[name] == undefined) {
                        data[name] = childValue;
                    } else {
                        Object.assign(data[name], childValue);
                    }

                } else {
                    if (childName != undefined) {
                        let childValue = child.kicsy.getValue();
                        data[childName] = childValue;
                    }
                }
            }
        }

        // If a callback function is provided, call it with the data object and return the current instance of the container
        if (callback != undefined) {
            callback(data);
            return this;
        } else {
            // Otherwise, return the data object
            return data;
        }

    }


    /**
     * Sets the data of the container and its child components with the data from the array at the specified index.
     * If there are more records in the array, clones the container and calls itself recursively with the next record.
     *
     * @param {Array} arrayData - The array of data to set in the container.
     * @param {number} [index=0] - The index of the record to set in the container. Defaults to 0.
     * @param {KicsyVisualComponent} [template=this] - The template to use for cloning the container. Defaults to the current instance of the container.
     * @returns {KicsyVisualContainerComponent} - The current instance of the container.
     */
    setArrayData(arrayData, index = 0, template = this) {

        // Get the data from the current record
        let data = arrayData[index];

        // Set the data for the current instance of the container
        this.setData(data);

        // Increment the index and check if there are more records in the array
        index++;
        if (index == arrayData.length) { return this; }

        // Clone the container
        let nextRecord = template.clone();

        // Insert the cloned container before the current container
        this.dom.parentNode.insertBefore(nextRecord.dom, this.dom.parentNode.lastChild);

        // Call setArrayData recursively with the next record
        nextRecord.setArrayData(arrayData, index, template);

        return this;

    }


    getArrayData(callback, arrayData = []) {

        let data = {};


        let name = this.dom.getAttribute("name");

        for (let child of this.dom.childNodes) {

            let childName = child.getAttribute("name");

            if (child.kicsy.getArrayData != undefined) {
                if (name == undefined) {
                    child.kicsy.getArrayData(callback, data);
                } else {
                    child.kicsy.getArrayData(callback, data[name]);
                }
            } else {
                if (name != undefined && childName != undefined) {
                    let childValue = {};
                    childValue[childName] = child.kicsy.getValue();
                    if (data[name] == undefined) {
                        data[name] = childValue;
                    } else {
                        Object.assign(data[name], childValue);
                    }
                } else {
                    if (childName != undefined) {
                        let childValue = child.kicsy.getValue();
                        data[childName] = childValue;
                    }
                }
            }

        }

        arrayData.push(data);

        if (this.dom.nextSibling != null) {
            if (this.dom.nextSibling.kicsy.getArrayData != undefined) {
                this.dom.nextSibling.kicsy.getArrayData(callback, arrayData);
            }
        }


        if (callback != undefined) {
            callback(arrayData);
            return this;
        } else {
            return arrayData;
        }
    }






        KRow(
            KColumn(
                KButton("Boton 1"),
                KButton("Boton 2"),
                KButton("Boton 3"),
                KButton("Boton 4"),
                KButton("Boton 5"),
                KButton("Boton 6"),
                KButton("Boton 7"),
                KButton("Boton 8"),
                KButton("Boton 9"),
                KButton("Boton 10"),
            ).setSize(100, 300),
            KColumn(
                KButton("Boton 1"),
                KButton("Boton 2"),
                KButton("Boton 3"),
                KButton("Boton 4"),
                KButton("Boton 5"),
                KButton("Boton 6"),
                KButton("Boton 7"),
                KButton("Boton 8"),
                KButton("Boton 9"),
                KButton("Boton 10"),
            ).setSize(100, 300)
        )

            .publish();




        KDataViewer(
            KLayer(
                KText().setName("tipo"),
                KText().setName("marca")
            ).setName("vehiculo")
        )
            .getMe(me => viewer = me)
            .publish()
            .setArrayData(arrayData);


        let b1 = KButton("Boton 1").addEvent("click", function () {
            arrayData2 = viewer.getArrayData();
            console.log(KDataUtils.getDifferencesBetweenArrayData(arrayData, arrayData2));
        })
            .publish();

        let b2 = b1.clone().publish();


         let galaxyStyle = "background: radial-gradient(circle at bottom, navy 0, black 100%);";
       







