/**
TEMPRAL
*/

/**
     * Sets the data for all child components of the container.
     * If a child component has a setData method, it is called with the corresponding value.
     * If a child component has a setValue method, it is called with the corresponding value.
     * Each child must have a name attribute set. Use {@link KicsyComponent#setName} to add child components.
     *
     * @param {Object} data - The data object containing the values to set.
     * @return {KicsyVisualContainerComponent} - The current instance of the container.
     */
    setData(data) {

        // Get the name attribute of the child component's DOM element
        let name = this.dom.getAttribute("name");

        if (name == undefined) {
            for (let child of this.dom.childNodes) {
                if (child.kicsy.setData != undefined) {
                    child.kicsy.setData(data);
                } else {
                    let childName = child.getAttribute("name");
                    if (data[childName] != undefined) {
                        child.kicsy.setValue(data[childName]);
                    }
                }
            }
        } else {


            // Iterate over each child component of the container's DOM element
            for (let child of this.dom.childNodes) {

                // Get the name attribute of the child component's DOM element
                let childName = child.getAttribute("name");


                // If the data object contains a value for the current child component's name
                if (data[name] != undefined) {
                    // If the child component has a setData method, call it with the corresponding value
                    if (child.kicsy.setData != undefined) {
                        child.kicsy.setData(data[name]);
                    }
                    // Otherwise, call the setValue method with the corresponding value
                    else {
                        if (childName != undefined && name != undefined) {
                            child.kicsy.setValue(data[name][childName]);
                        }
                    }
                } else {
                    // If the child component has a setData method, call it with the corresponding value
                    if (child.kicsy.setData != undefined) {
                        child.kicsy.setData(data);
                    }
                }
            }
        }
        // Return the current instance of the container
        return this;
    }


    /**
     * Retrieves data from all child components of the container.
     * If a child component has a getData method, it is called recursively with the corresponding value.
     * If a child component has a getValue method, its value is stored in the data object.
     * Each child must have a name attribute set. Use {@link KicsyComponent#setName} to add child components.
     *
     * @param {Object} [data] - The data object to store the values in. If not provided, a new object is created.
     * @param {function} [callback] - The callback function to call with the data object. If not provided, the data object is returned.
     * @returns {KicsyVisualContainerComponent|Object} - If no callback function is provided, the data object is returned.
     * Otherwise, the current instance of the container is returned.
     */
    getData(data, callback) {

        // If no data object is provided, create a new one
        if (data == undefined) {
            data = {};
        }

        // Get the name attribute of the container's DOM element
        let name = this.dom.getAttribute("name");

        // Iterate over each child component of the container's DOM element
        for (let child of this.dom.childNodes) {

            // Get the name attribute of the child component's DOM element
            let childName = child.getAttribute("name");

            // If the child component has a getData method, call it recursively
            if (child.kicsy.getData != undefined) {
                if (name == undefined) {
                    child.kicsy.getData(data, callback);
                } else {
                    child.kicsy.getData(data[name], callback);
                }
            } else {
                // If the child component has a getValue method, store its value in the data object
                if (name != undefined && childName != undefined) {
                    let childValue = {};
                    childValue[childName] = child.kicsy.getValue();
                    if (data[name] == undefined) {
                        data[name] = childValue;
                    } else {
                        Object.assign(data[name], childValue);
                    }

                } else {
                    if (childName != undefined) {
                        let childValue = child.kicsy.getValue();
                        data[childName] = childValue;
                    }
                }
            }
        }

        // If a callback function is provided, call it with the data object and return the current instance of the container
        if (callback != undefined) {
            callback(data);
            return this;
        } else {
            // Otherwise, return the data object
            return data;
        }

    }


    /**
     * Sets the data of the container and its child components with the data from the array at the specified index.
     * If there are more records in the array, clones the container and calls itself recursively with the next record.
     *
     * @param {Array} arrayData - The array of data to set in the container.
     * @param {number} [index=0] - The index of the record to set in the container. Defaults to 0.
     * @param {KicsyVisualComponent} [template=this] - The template to use for cloning the container. Defaults to the current instance of the container.
     * @returns {KicsyVisualContainerComponent} - The current instance of the container.
     */
    setArrayData(arrayData, index = 0, template = this) {

        // Get the data from the current record
        let data = arrayData[index];

        // Set the data for the current instance of the container
        this.setData(data);

        // Increment the index and check if there are more records in the array
        index++;
        if (index == arrayData.length) { return this; }

        // Clone the container
        let nextRecord = template.clone();

        // Insert the cloned container before the current container
        this.dom.parentNode.insertBefore(nextRecord.dom, this.dom.parentNode.lastChild);

        // Call setArrayData recursively with the next record
        nextRecord.setArrayData(arrayData, index, template);

        return this;

    }


    getArrayData(callback, arrayData = []) {

        let data = {};


        let name = this.dom.getAttribute("name");

        for (let child of this.dom.childNodes) {

            let childName = child.getAttribute("name");

            if (child.kicsy.getArrayData != undefined) {
                if (name == undefined) {
                    child.kicsy.getArrayData(callback, data);
                } else {
                    child.kicsy.getArrayData(callback, data[name]);
                }
            } else {
                if (name != undefined && childName != undefined) {
                    let childValue = {};
                    childValue[childName] = child.kicsy.getValue();
                    if (data[name] == undefined) {
                        data[name] = childValue;
                    } else {
                        Object.assign(data[name], childValue);
                    }
                } else {
                    if (childName != undefined) {
                        let childValue = child.kicsy.getValue();
                        data[childName] = childValue;
                    }
                }
            }

        }

        arrayData.push(data);

        if (this.dom.nextSibling != null) {
            if (this.dom.nextSibling.kicsy.getArrayData != undefined) {
                this.dom.nextSibling.kicsy.getArrayData(callback, arrayData);
            }
        }


        if (callback != undefined) {
            callback(arrayData);
            return this;
        } else {
            return arrayData;
        }
    }






        KRow(
            KColumn(
                KButton("Boton 1"),
                KButton("Boton 2"),
                KButton("Boton 3"),
                KButton("Boton 4"),
                KButton("Boton 5"),
                KButton("Boton 6"),
                KButton("Boton 7"),
                KButton("Boton 8"),
                KButton("Boton 9"),
                KButton("Boton 10"),
            ).setSize(100, 300),
            KColumn(
                KButton("Boton 1"),
                KButton("Boton 2"),
                KButton("Boton 3"),
                KButton("Boton 4"),
                KButton("Boton 5"),
                KButton("Boton 6"),
                KButton("Boton 7"),
                KButton("Boton 8"),
                KButton("Boton 9"),
                KButton("Boton 10"),
            ).setSize(100, 300)
        )

            .publish();




        KDataViewer(
            KLayer(
                KText().setName("tipo"),
                KText().setName("marca")
            ).setName("vehiculo")
        )
            .getMe(me => viewer = me)
            .publish()
            .setArrayData(arrayData);


        let b1 = KButton("Boton 1").addEvent("click", function () {
            arrayData2 = viewer.getArrayData();
            console.log(KDataUtils.getDifferencesBetweenArrayData(arrayData, arrayData2));
        })
            .publish();

        let b2 = b1.clone().publish();


         let galaxyStyle = "background: radial-gradient(circle at bottom, navy 0, black 100%);";
       







